#This program updates, cancels, adds and deletes on the table in the database
#This program updates, cancels, adds and deletes on the table in the database
import sys
import mysql.connector
from PyQt5 import QtWidgets
from MaintainProducts import Ui_Dialog  # Assuming Ui_Dialog is generated by PyQt5's Designer
from PyQt5.QtGui import QStandardItemModel, QStandardItem
import warnings

warnings.filterwarnings("ignore", category=DeprecationWarning)

def createConnection():
    try:
        conn = mysql.connector.connect(host='localhost', database='shopping', user='root', password='Th00l$122')
        if conn.is_connected():
            print('Connected to MySQL database')
            return conn
        else:
            print('Failed to connect to database')
            return None
    except mysql.connector.Error as e:
        print(f'Error connecting to MySQL: {e}')
        return None

class MyForm(QtWidgets.QDialog):
    def __init__(self, conn, parent=None):
        super(MyForm, self).__init__(parent)
        self.ui = Ui_Dialog()
        self.ui.setupUi(self)
        self.conn = conn
        self.cursor = self.conn.cursor()
        self.refreshTable()

        self.ui.UpdateButton.clicked.connect(self.updateRecords)
        self.ui.CancelButton.clicked.connect(self.cancelChanges)
        self.ui.InsertButton.clicked.connect(self.insertRecord)
        self.ui.DeleteButton.clicked.connect(self.deleteRecord)
        self.ui.FilterButton.clicked.connect(self.filterRecords)

    def refreshTable(self):
        self.cursor.execute("SELECT * FROM products")
        data = self.cursor.fetchall()

        model = QStandardItemModel(len(data), len(data[0]) if data else 0)

        headers = [i[0] for i in self.cursor.description]
        model.setHorizontalHeaderLabels(headers)

        for row, row_data in enumerate(data):
            for col, col_data in enumerate(row_data):
                item = QStandardItem(str(col_data))
                model.setItem(row, col, item)

        self.ui.tableView.setModel(model)

    def updateRecords(self):
        try:
            self.conn.commit()
            self.refreshTable()
        except Exception as e:
            print(f"Error in updateRecords: {e}")

    def cancelChanges(self):
        try:
            self.conn.rollback()
            self.refreshTable()
        except Exception as e:
            print(f"Error in cancelChanges: {e}")

    def insertRecord(self):
        try:
            # Get the current cursor position
            current_row = self.ui.tableView.selectionModel().currentIndex().row()

            # Check if a row is selected, if not insert at the end
            insert_position = current_row + 1 if current_row >= 0 else self.ui.tableView.model().rowCount()

            # Insert a blank row into the model
            model = self.ui.tableView.model()
            model.insertRow(insert_position)

            # Insert a record with default values into the database
            # Replace 'product_name', 'price' with actual column names and ensure they are not nullable
            self.cursor.execute("INSERT INTO products (prod_id, prod_name, quantity, price) VALUES (%s, %s, %s, %s)", (0, '', 0, 0))
            self.conn.commit()

            # Refresh the table to display the new row
            self.refreshTable()

            print("Record inserted successfully")

        except mysql.connector.Error as e:
            print(f"Error in insertRecord: {e}")

    def deleteRecord(self):
        try:
            current_row = self.ui.tableView.selectionModel().currentIndex().row()
            if current_row >= 0:
                prod_id = self.ui.tableView.model().item(current_row, 0).text()  # Assuming the first column is the product ID
                self.cursor.execute("DELETE FROM products WHERE prod_id = %s", (prod_id,))
                self.conn.commit()
                self.refreshTable()
            else:
                print("No row selected for deletion")
        except Exception as e:
            print(f"Error in deleteRecord: {e}")

    def filterRecords(self):
        try:
            prod_name = self.ui.prodname.text()
            self.cursor.execute(f"SELECT * FROM products WHERE prod_name LIKE %s", (f'{prod_name}%',))
            data = self.cursor.fetchall()

            model = QStandardItemModel(len(data), len(data[0]) if data else 0)
            headers = [i[0] for i in self.cursor.description]
            model.setHorizontalHeaderLabels(headers)

            for row, row_data in enumerate(data):
                for col, col_data in enumerate(row_data):
                    item = QStandardItem(str(col_data))
                    model.setItem(row, col, item)

            self.ui.tableView.setModel(model)
        except Exception as e:
            print(f"Error in filterRecords: {e}")

if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    conn = createConnection()
    if not conn:
        sys.exit(1)
    myapp = MyForm(conn)
    myapp.show()
    sys.exit(app.exec_())


    
